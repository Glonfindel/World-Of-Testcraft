package com.worldoftestcraft.repository;

import com.worldoftestcraft.app.Account;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class AccountRepositoryImpl implements AccountRepository {

    private Connection connection;

    private PreparedStatement addAccountStmt;
    private PreparedStatement updateAccountStmt;
    private PreparedStatement deleteAccountStmt;
    private PreparedStatement getAllAccountsStmt;
    private PreparedStatement getAccountByIdStmt;

    public AccountRepositoryImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            initDatabase();
        }
        setConnection(connection);
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Account".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int add(Account account) {
        int count = 0;
        try {
            addAccountStmt.setString(1, account.getLogin());
            addAccountStmt.setString(2, account.getPassword());
            count = addAccountStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }
    

	@Override
	public int delete(Account account) {
        int count = 0;     
        try {
            deleteAccountStmt.setInt(1, account.id);
            count = deleteAccountStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
	}

	@Override
	public Account getById(int id) {
        Account account = new Account();        
        try {
            getAccountByIdStmt.setInt(1, id);
            ResultSet rs = getAccountByIdStmt.executeQuery();

            while (rs.next()) {
                account.setId(rs.getInt("id"));
                account.setLogin(rs.getString("name"));
                account.setPassword(rs.getString("password"));
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return account;
	}

    @Override
    public List<Account> getAll() {
        List<Account> accounts = new LinkedList<>();
        try {
            ResultSet rs = getAllAccountsStmt.executeQuery();

            while (rs.next()) {
                Account account = new Account();
                account.setId(rs.getInt("id"));
                account.setLogin(rs.getString("name"));
                account.setPassword(rs.getString("password"));
                accounts.add(account);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return accounts;
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addAccountStmt = connection.prepareStatement("INSERT INTO Account (login, password) VALUES (?, ?)");
        deleteAccountStmt = connection.prepareStatement("DELETE FROM Account WHERE id = ?");
        getAllAccountsStmt = connection.prepareStatement("SELECT id, login, password FROM Account");
        getAccountByIdStmt = connection.prepareStatement("SELECT id, login, password FROM Account WHERE id = ?");
    }

	@Override
	public void initDatabase() throws SQLException {
        connection.createStatement().executeUpdate(
            "CREATE TABLE "
                + "Account(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                "login varchar(32) NOT NULL, " + " password varchar(32) NOT NULL)");
	}

	@Override
	public int update(int oldAccountId, int newAccountId) {
		return 0;
	}


}